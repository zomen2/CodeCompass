os: linux
dist: bionic
language: minimal
services:
  - postgresql

# ---------------------------- APT configuration -----------------------------

.apt_xenial_config: &apt_xenial_config
  update: true
  sources:
    - ubuntu-toolchain-r-test
    - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main"
      key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"

.apt_xenial_sqlite: &apt_xenial_sqlite
  <<: *apt_xenial_config
  packages:
    # Boost
    - libboost-filesystem-dev
    - libboost-log-dev
    - libboost-program-options-dev
    - libboost-regex-dev
    # LLVM/clang
    - llvm-10
    - llvm-10-dev
    - clang-10
    - libclang-10-dev
    # Java
    - default-jdk
    # ODB
    - odb
    - libodb-dev
    # SQLite
    - libodb-sqlite-dev
    - libsqlite3-dev
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - nodejs-legacy
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl-dev
    # Thrift (compile)
    - byacc
    - flex

.apt_xenial_pgsql: &apt_xenial_pgsql
  <<: *apt_xenial_config
  packages:
    # Boost
    - libboost-filesystem-dev
    - libboost-log-dev
    - libboost-program-options-dev
    - libboost-regex-dev
    # LLVM/clang
    - llvm-10
    - llvm-10-dev
    - clang-10
    - libclang-10-dev
    # Java
    - default-jdk
    # ODB
    - odb
    - libodb-dev
    # PostgreSQL
    - libodb-pgsql-dev
    - postgresql-9.5
    - postgresql-server-dev-9.5
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - nodejs-legacy
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl-dev
    # Thrift (compile)
    - byacc
    - flex

.apt_bionic_config: &apt_bionic_config
  update: true

.apt_bionic_sqlite: &apt_bionic_sqlite
  <<: *apt_bionic_config
  packages:
    # Boost
    - libboost-filesystem-dev
    - libboost-log-dev
    - libboost-program-options-dev
    - libboost-regex-dev
    # LLVM/clang
    - llvm-10
    - llvm-10-dev
    - clang-10
    - libclang-10-dev
    # Java
    - default-jdk
    # ODB
    - gcc-7-plugin-dev
    # SQLite
    - libsqlite3-dev
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl1.0-dev
    # Thrift (compile)
    - byacc
    - flex

.apt_bionic_pgsql: &apt_bionic_pgsql
  <<: *apt_bionic_config
  packages:
    # Boost
    - libboost-filesystem-dev
    - libboost-log-dev
    - libboost-program-options-dev
    - libboost-regex-dev
    # LLVM/clang
    - llvm-10
    - llvm-10-dev
    - clang-10
    - libclang-10-dev
    # Java
    - default-jdk
    # ODB
    - gcc-7-plugin-dev
    # PostgreSQL
    - postgresql-10
    - postgresql-server-dev-10
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl1.0-dev
    # Thrift (compile)
    - byacc
    - flex

.apt_focal_config: &apt_focal_config
  update: true

.apt_focal_sqlite: &apt_focal_sqlite
  <<: *apt_focal_config
  packages:
    # Boost
    - libboost-filesystem-dev
    - libboost-log-dev
    - libboost-program-options-dev
    - libboost-regex-dev
    # LLVM/clang
    - llvm-10
    - llvm-10-dev
    - clang-10
    - libclang-10-dev
    # Java
    - default-jdk
    # ODB
    - odb
    - libodb-dev
    # SQLite
    - libodb-sqlite-dev
    - libsqlite3-dev
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - thrift-compiler
    - libthrift-dev
    - libssl-dev

.apt_focal_pgsql: &apt_focal_pgsql
  <<: *apt_focal_config
  packages:
    # Boost
    - libboost-filesystem-dev
    - libboost-log-dev
    - libboost-program-options-dev
    - libboost-regex-dev
    # LLVM/clang
    - llvm-10
    - llvm-10-dev
    - clang-10
    - libclang-10-dev
    # Java
    - default-jdk
    # ODB
    - odb
    - libodb-dev
    # PostgreSQL
    - libodb-pgsql-dev
    # (Travis can't automatically spin up a running PostgreSQL instance for
    # 20.04.)
    - postgresql-12
    - postgresql-server-dev-12
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - thrift-compiler
    - libthrift-dev
    - libssl-dev

# ------------------------ Self-compiled dependencies ------------------------

.install_thrift: &install_thrift
  |
  if [ ! -f "$HOME/thrift_install/bin/thrift" ]; then
    echo "Building Thrift..."
    cd $HOME
    wget -O thrift-0.13.0.tar.gz "http://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=thrift/0.13.0/thrift-0.13.0.tar.gz"
    tar -xvf ./thrift-0.13.0.tar.gz
    cd thrift-0.13.0
    ./configure --prefix=$HOME/thrift_install --without-python         \
      --enable-libtool-lock --enable-tutorial=no --enable-tests=no     \
      --with-libevent --with-zlib --without-nodejs --without-lua       \
      --without-ruby --without-csharp --without-erlang --without-perl  \
      --without-php --without-php_extension --without-dart             \
      --without-haskell --without-go --without-rs --without-haxe       \
      --without-dotnetcore --without-d --without-qt4 --without-qt5     \
      --without-java
    make install -j $(nproc)
  fi

.install_odb: &install_odb
  |
  if [ ! -f "$HOME/build2_install/bin/bpkg" ]; then
    echo "Building Build2..."
    mkdir /tmp/build2src
    cd /tmp/build2src
    curl -sSfO https://download.build2.org/0.13.0/build2-install-0.13.0.sh
    sh build2-install-0.13.0.sh --yes --trust yes "$HOME/build2_install/"
  fi
  export PATH=$PATH:$HOME/build2_install/bin/
  if [ ! -f "$HOME/odb_install/bin/odb" ]; then
    mkdir /tmp/odb_build
    cd /tmp/odb_build
    bpkg create --quiet --jobs $(nproc) cc \
      config.cxx=g++ config.cc.coptions=-O3 \
      config.bin.rpath="$HOME/odb_install/lib" config.install.root="$HOME/odb_install" \
      config.install.sudo=sudo
    bpkg add https://pkg.cppget.org/1/beta --trust-yes
    bpkg fetch --trust-yes
    echo "Building ODB..."
    bpkg build odb --yes
    bpkg build libodb --yes
    [ "$DATABASE" == "sqlite" ] && (echo "Building ODB/SQLite..."; bpkg build libodb-sqlite --yes) || echo "Skip building ODB/SQLite!"
    [ "$DATABASE" == "pgsql" ] && (echo "Building ODB/PostgreSQL..."; bpkg build libodb-pgsql --yes) || echo "Skip building ODB/PostgreSQL!"
    bpkg install --all --recursive
  fi

.install_gtest_xenial: &install_gtest_xenial
  |
  if [ ! -f "$HOME/gtest_install/lib/libgtest.a" ]; then
    echo "Building GoogleTest..."
    cd $HOME
    mkdir gtest
    cp -R /usr/src/gtest/* ./gtest
    cd gtest
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/gtest_install
    make -j $(nproc)

    mkdir -p $HOME/gtest_install/lib
    cp libgtest.a libgtest_main.a $HOME/gtest_install/lib/
  fi

.install_gtest_bionic: &install_gtest_bionic
  |
  if [ ! -f "$HOME/gtest_install/lib/libgtest.a" ]; then
    echo "Building GoogleTest..."
    cd $HOME
    mkdir gtest
    cp -R /usr/src/googletest/* ./gtest
    cd gtest
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/gtest_install
    make install -j $(nproc)
  fi

.install_gtest_focal: &install_gtest_focal
  |
  if [ ! -f "$HOME/gtest_install/lib/libgtest.a" ]; then
    echo "Building GoogleTest..."
    cd $HOME
    mkdir gtest
    cp -R /usr/src/googletest/* ./gtest
    cd gtest
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/gtest_install
    make install -j $(nproc)
  fi

# ---------------------------------- Setup -----------------------------------

before_script:
  # Default locations and versions
  - which cmake g++ clang llvm-config javac
  - cmake --version
  - g++ --version
  - clang --version
  - llvm-config --version --has-rtti
  - javac -version
  # LLVM/Clang test from package install
  - /usr/bin/clang-10 --version
  - /usr/bin/llvm-config-10 --version --has-rtti
  # ODB
  - export CMAKE_PREFIX_PATH=$HOME/odb_install:$CMAKE_PREFIX_PATH
  - export PATH=$HOME/odb_install/bin:$PATH
  - which odb
  - odb --version
  # Thrift
  - export CMAKE_PREFIX_PATH=$HOME/thrift_install:$CMAKE_PREFIX_PATH
  - export PATH=$HOME/thrift_install/bin:$PATH
  - which thrift
  - thrift --version
  # GTest
  - export GTEST_ROOT=$HOME/gtest_install

.create_postgres_user: &create_postgres_user
  # Newer PostgreSQL servers on Travis don't automatically allow connecting with the 'postgres' user.
  # Enable trust authentication method for the PostgreSQL server to create the cc user.
  # !! YOU SHOULD **NEVER** DO THIS ON A LIVE SYSTEM !!
  - sudo cat /etc/postgresql/*/main/pg_hba.conf
  - sudo sed -i "s/peer/trust/g" /etc/postgresql/*/main/pg_hba.conf
  - sudo sed -i "s/md5/trust/g" /etc/postgresql/*/main/pg_hba.conf
  - sudo cat /etc/postgresql/*/main/pg_hba.conf
  - sudo service postgresql restart
  - sudo service postgresql status
  - psql -h localhost -p 5432 -U postgres -c "CREATE USER cc WITH SUPERUSER LOGIN PASSWORD 'cc'";
  - echo "localhost:5432:*:cc:cc" > $HOME/.pgpass

.build_postgres: &build_postgres
  - cd $HOME
  - rm -rf build_pgsql install_pgsql
  - mkdir build_pgsql && cd build_pgsql
  - >
    cmake $TRAVIS_BUILD_DIR
    -DDATABASE=pgsql
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=$HOME/install_pgsql
    -DTEST_DB="pgsql:host=localhost;port=5432;user=cc;password=cc;database=cc_test"
    -DLLVM_DIR=/usr/lib/llvm-10/cmake
    -DClang_DIR=/usr/lib/cmake/clang-10
    -DCMAKE_EXPORT_COMPILE_COMMANDS=1
  - make install -j $(nproc)
  - make test ARGS=-V

.build_sqlite: &build_sqlite
  - cd $HOME
  - rm -rf build_sqlite install_sqlite
  - mkdir build_sqlite && cd build_sqlite
  - >
    cmake $TRAVIS_BUILD_DIR
    -DDATABASE=sqlite
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=$HOME/install_sqlite
    -DTEST_DB="sqlite:database=$HOME/cc_test.sqlite"
    -DLLVM_DIR=/usr/lib/llvm-10/cmake
    -DClang_DIR=/usr/lib/cmake/clang-10
    -DCMAKE_EXPORT_COMPILE_COMMANDS=1
  - make install -j $(nproc)
  - make test ARGS=-V

# ----------------------------------- Cache -----------------------------------

cache:
  directories:
    - $HOME/build2_install
    - $HOME/gtest_install
    - $HOME/odb_install
    - $HOME/thrift_install
    - $HOME/install_pgsql
    - $HOME/install_sqlite
    - $HOME/build_pgsql
    - $HOME/build_sqlite

# ----------------------------------- Jobs -----------------------------------

stages:
  - compile
  - test
  - name: deploy
    if: (branch = master) AND (type = push) AND (fork = false)

jobs:
  include:
    - stage: compile
      name: "Xenial Xerus (16.04), PostgreSQL"
      dist: xenial
      addons:
        apt:
          <<: *apt_xenial_pgsql
        postgresql: "9.5"
      env:
        - DATABASE=pgsql
      before_install:
        - *create_postgres_user
      install:
        - *install_thrift
        - *install_gtest_xenial
      script:
        *build_postgres
    - name: "Xenial Xerus (16.04), SQLite"
      dist: xenial
      addons:
        apt:
          <<: *apt_xenial_sqlite
      env:
        - DATABASE=sqlite
      install:
        - *install_thrift
        - *install_gtest_xenial
      script:
        *build_sqlite
    - name: "Bionic Beaver (18.04), PostgreSQL"
      dist: bionic
      addons:
        apt:
          <<: *apt_bionic_pgsql
        postgresql: "10"
      env:
        - DATABASE=pgsql
      before_install:
        - *create_postgres_user
      install:
        - *install_odb
        - *install_thrift
        - *install_gtest_bionic
      script:
        *build_postgres
    - name: "Bionic Beaver (18.04), SQLite"
      dist: bionic
      addons:
        apt:
          <<: *apt_bionic_sqlite
      env:
        - DATABASE=sqlite
      install:
        - *install_odb
        - *install_thrift
        - *install_gtest_bionic
      script:
        *build_sqlite
    - name: "Focal Fossa (20.04), PostgreSQL"
      dist: focal
      addons:
        apt:
          <<: *apt_focal_pgsql
        postgresql: "12"
      env:
        - DATABASE=pgsql
      before_install:
        - *create_postgres_user
      install:
        - *install_gtest_focal
      script:
        *build_postgres
    - name: "Focal Fossa (20.04), SQLite"
      dist: focal
      addons:
        apt:
          <<: *apt_focal_sqlite
      env:
        - DATABASE=sqlite
      install:
        - *install_gtest_focal
      script:
        *build_sqlite

    - stage: test
      name: "Parse CodeCompass"
      dist: bionic
      addons:
        apt:
          <<: *apt_bionic_pgsql
        postgresql: "10"
      env:
        - DATABASE=pgsql
      before_install:
        - *create_postgres_user
      install:
        - *install_odb
        - *install_thrift
      script:
        - cd $HOME/install_pgsql/bin
        - >
          ./CodeCompass_parser
          -d "pgsql:host=localhost;port=5432;user=cc;password=cc;database=cc"
          -w $HOME/ws_pgsql/
          -n CodeCompass
          -i $TRAVIS_BUILD_DIR
          -i $HOME/build_pgsql/compile_commands.json
          -j $(nproc)
    - name: "Parse TinyXML"
      dist: bionic
      addons:
        apt:
          <<: *apt_bionic_pgsql
        postgresql: "10"
      env:
        - DATABASE=pgsql
      before_install:
        - *create_postgres_user
      install:
        - *install_odb
        - *install_thrift
      script:
        - cd $HOME
        - git clone https://github.com/leethomason/tinyxml2
        - mkdir build_tinyxml2 && cd build_tinyxml2
        - cmake $HOME/tinyxml2 -DCMAKE_EXPORT_COMPILE_COMMANDS=1
        - make -j $(nproc)
        - cd $HOME/install_pgsql/bin
        - >
          ./CodeCompass_parser
          -d "pgsql:host=localhost;port=5432;user=cc;password=cc;database=tinyxml2"
          -w $HOME/ws_pgsql/
          -n TinyXML2
          -i $HOME/tinyxml2
          -i $HOME/build_tinyxml2/compile_commands.json
          -j $(nproc)
    - name: "Parse Xerces-C++"
      dist: bionic
      addons:
        apt:
          <<: *apt_bionic_pgsql
        postgresql: "10"
      env:
        - DATABASE=pgsql
      before_install:
        - *create_postgres_user
      install:
        - *install_odb
        - *install_thrift
      script:
        - cd $HOME
        - git clone https://github.com/apache/xerces-c/
        - mkdir build_xerces-c && cd build_xerces-c
        - cmake $HOME/xerces-c -DCMAKE_EXPORT_COMPILE_COMMANDS=1
        - make -j $(nproc)
        - cd $HOME/install_pgsql/bin
        - >
          ./CodeCompass_parser
          -d "pgsql:host=localhost;port=5432;user=cc;password=cc;database=xerces_c"
          -w $HOME/ws_pgsql/
          -n "Xerces-C"
          -i $HOME/xerces-c
          -i $HOME/build_xerces-c/compile_commands.json
          -j $(nproc)

    - stage: deploy
      name: "DockerHub deployment"
      dist: focal
      services:
        - docker
      before_script:
        - docker --version
      script:
        - docker build -t codecompass:dev     -t modelcpp/codecompass:dev            --file docker/dev/Dockerfile .
        - docker build -t codecompass:runtime -t modelcpp/codecompass:runtime-sqlite --file docker/runtime/Dockerfile --no-cache --build-arg CC_DATABASE=sqlite .
        - docker build -t codecompass:web     -t modelcpp/codecompass:web-sqlite     --file docker/web/Dockerfile --no-cache .
        - docker build -t codecompass:runtime -t modelcpp/codecompass:runtime-pgsql  --file docker/runtime/Dockerfile --no-cache --build-arg CC_DATABASE=pgsql .
        - docker build -t codecompass:web     -t modelcpp/codecompass:web-pgsql      --file docker/web/Dockerfile --no-cache .
        - docker tag modelcpp/codecompass:runtime-pgsql modelcpp/codecompass:latest
        - |
          if [ -n "$DOCKER_USERNAME" ]; then
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push modelcpp/codecompass:dev
            docker push modelcpp/codecompass:runtime-sqlite
            docker push modelcpp/codecompass:runtime-pgsql
            docker push modelcpp/codecompass:web-sqlite
            docker push modelcpp/codecompass:web-pgsql
            docker push modelcpp/codecompass:latest
          fi

